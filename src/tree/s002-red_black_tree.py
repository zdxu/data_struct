# -*- coding: utf-8 -*-

# 一种含有红黑结点并能够自平衡的二叉树，满足以下性质：
# 性质一：每个结点要么是黑色要么是红色
# 性质二：根结点是黑色
# 性质三：每个叶子结点是黑色（叶子结点是 null 结点，不包含数据只是充当树在此结束的指示）
# 性质四：每个红色结点的两个子结点一定是黑色结点
# 性质五：任意结点到每个叶子结点的路径都包含相同数量的黑结点

# ----  父结点为黑色或空树时  ----
# 父结点是根结点或者树为空树 直接插
# 父结点是黑色 插入结点置为红色即可（原先一定是红黑树，满足性质五，置为红色后任然满足性质五）


# ----  父结点为红色  ----
# ----  父结点为红色，那么如果有叔叔结点，那么也必是红色（初始插入时）  ----
# 步骤-：插入结点维持红色不变，将父结点及叔叔结点置为黑色，祖父结点置为红色，

# ---- 若祖父结点的父结点为黑色，插入结束

# ---- 若祖父结点的父结点为红色，以祖父结点为当前结点

# ---- 若无叔叔结点或叔叔结点也为红色时，重复步骤一

# ---- 若叔叔结点为黑色，当前结点为右子结点
# 步骤二：以当前结点为支点左旋，然后以祖父结点为当前结点
# ---- 当前结点为左子结点且祖父结点为红色，叔叔结点为黑色
# 步骤三：以当前结点为支点右旋，然后以祖父结点为当前结点
# 。。。

# ----  若叔叔结点为黑色，当前结点为左子结点
# 上述右子结点的步骤二、三调换顺序

# 步骤四：判断根结点是否是黑色，非黑色则置黑，插入结束


# 删除最终都转换成了，树尾结点替换并删除树尾结点

# 步骤-：查找树尾替换结点

# 替换结点为红色 直接删

# 替换结点为黑色
# 黑 红 黑
#    1 叔结点有少于两个子结点 以父结点为当前结点旋转，树尾结点置红
#    2 叔结点有两个子结点 以父结点为当前结点旋转，树尾结点置红 + 新插入叔结点的一个子结点
# 黑 黑 红
#
